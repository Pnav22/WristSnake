#include <WiFi.h>
#include <WebServer.h>
#include <Adafruit_NeoPixel.h>

#define LED_PIN 23
#define LED_WIDTH 32
#define LED_HEIGHT 8
#define NUM_LEDS (LED_WIDTH * LED_HEIGHT)
#define BRIGHTNESS 64  // 25% of 255

const char* ssid = "YOUR SSID";
const char* password = "Your Password";

Adafruit_NeoPixel strip(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);
WebServer server(80);

int snakeLength = 5;
int snakeDir = 1;  // 0=up, 1=right, 2=down, 3=left
int snakeX[256];
int snakeY[256];
int appleX, appleY;

unsigned long lastMove = 0;
int speedDelay = 200;

// Fixed function - rotated coordinates to match your physical layout
int xyToIndex(int x, int y) {
  // Rotate coordinates 90 degrees clockwise
  int newX = y;
  int newY = LED_WIDTH - 1 - x;
  
  // Apply serpentine layout
  if (newY % 2 == 0) {
    return newY * LED_HEIGHT + newX;
  } else {
    return newY * LED_HEIGHT + (LED_HEIGHT - 1 - newX);
  }
}

void drawPixel(int x, int y, uint32_t color) {
  if (x >= 0 && x < LED_WIDTH && y >= 0 && y < LED_HEIGHT)
    strip.setPixelColor(xyToIndex(x, y), color);
}

void drawSnake() {
  strip.clear();
  for (int i = 0; i < snakeLength; i++)
    drawPixel(snakeX[i], snakeY[i], strip.Color(0, 255, 0));
  drawPixel(appleX, appleY, strip.Color(255, 0, 0));
  strip.show();
}

void moveSnake() {
  for (int i = snakeLength - 1; i > 0; i--) {
    snakeX[i] = snakeX[i - 1];
    snakeY[i] = snakeY[i - 1];
  }

  if (snakeDir == 0) snakeY[0]--;
  if (snakeDir == 1) snakeX[0]++;
  if (snakeDir == 2) snakeY[0]++;
  if (snakeDir == 3) snakeX[0]--;

  if (snakeX[0] < 0) snakeX[0] = LED_WIDTH - 1;
  if (snakeX[0] >= LED_WIDTH) snakeX[0] = 0;
  if (snakeY[0] < 0) snakeY[0] = LED_HEIGHT - 1;
  if (snakeY[0] >= LED_HEIGHT) snakeY[0] = 0;

  if (snakeX[0] == appleX && snakeY[0] == appleY) {
    snakeLength++;
    appleX = random(0, LED_WIDTH);
    appleY = random(0, LED_HEIGHT);
  }
}

void handleRoot() {
  String html = "<!DOCTYPE html><html><head>";
  html += "<title>Snake Controls</title>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1'>";
  html += "<style>";
  html += "body { text-align:center; font-family:sans-serif; background:#1a1a1a; color:white; padding:20px; }";
  html += "h1 { color:#4CAF50; }";
  html += ".info { background:#333; padding:15px; border-radius:10px; margin:20px auto; max-width:300px; }";
  html += ".controls { display:inline-block; margin-top:30px; }";
  html += "button { font-size:40px; width:80px; height:80px; margin:5px; background:#4CAF50; border:none; border-radius:10px; color:white; cursor:pointer; box-shadow:0 4px 8px rgba(0,0,0,0.3); }";
  html += "button:active { background:#45a049; transform:scale(0.95); }";
  html += ".row { display:block; }";
  html += "</style></head><body>";
  html += "<h1>üêç Snake Game</h1>";
  html += "<div class='info'>";
  html += "<p><strong>IP Address:</strong> " + WiFi.localIP().toString() + "</p>";
  html += "<p><strong>Snake Length:</strong> <span id='length'>" + String(snakeLength) + "</span></p>";
  html += "</div>";
  html += "<div class='controls'>";
  html += "<div class='row'><button onclick=\"fetch('/up')\">&#8593;</button></div>";
  html += "<div class='row'>";
  html += "<button onclick=\"fetch('/right')\">&#8594;</button>";
  html += "<button onclick=\"fetch('/down')\">&#8595;</button>";
  html += "<button onclick=\"fetch('/left')\">&#8592;</button>";
  html += "</div></div></body></html>";
  
  server.send(200, "text/html", html);
}

void handleDir(String dir) {
  if (dir == "up" && snakeDir != 2) snakeDir = 0;
  if (dir == "right" && snakeDir != 3) snakeDir = 1;
  if (dir == "down" && snakeDir != 0) snakeDir = 2;
  if (dir == "left" && snakeDir != 1) snakeDir = 3;
  server.send(200, "text/plain", "OK");
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("\n\n=== ESP32 Snake Game ===");
  
  strip.begin();
  strip.setBrightness(BRIGHTNESS);
  strip.show();

  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úì WiFi Connected!");
    Serial.println("========================");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    Serial.println("========================");
    Serial.print("\nOpen this URL in your browser: http://");
    Serial.println(WiFi.localIP());
    Serial.println();
  } else {
    Serial.println("\n‚úó WiFi Connection Failed!");
    Serial.println("Check your SSID and password");
  }

  server.on("/", handleRoot);
  server.on("/up", []() { handleDir("up"); });
  server.on("/down", []() { handleDir("down"); });
  server.on("/left", []() { handleDir("left"); });
  server.on("/right", []() { handleDir("right"); });
  server.begin();
  
  Serial.println("Web server started!");

  snakeX[0] = 5; snakeY[0] = 4;
  for (int i = 1; i < snakeLength; i++) {
    snakeX[i] = snakeX[i - 1] - 1;
    snakeY[i] = snakeY[i - 1];
  }

  randomSeed(analogRead(0));
  appleX = random(0, LED_WIDTH);
  appleY = random(0, LED_HEIGHT);
}

void loop() {
  server.handleClient();
  if (millis() - lastMove > speedDelay) {
    moveSnake();
    drawSnake();
    lastMove = millis();
  }
}
